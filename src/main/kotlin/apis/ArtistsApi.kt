/**
* Nekos API
* An open source anime artworks API.
*
* OpenAPI spec version: v3
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package news.apis

import news.models.ArtistSchema
import news.models.PagedArtistSchema
import news.models.PagedImageSchema

import dev.icerock.moko.network.NetworkResponse
import io.ktor.client.call.body
import io.ktor.client.HttpClient
import io.ktor.client.request.HttpRequestBuilder
import io.ktor.client.request.request
import io.ktor.client.request.forms.FormDataContent
import io.ktor.client.request.setBody
import io.ktor.http.ContentType
import io.ktor.http.HttpMethod
import io.ktor.http.Parameters
import io.ktor.http.takeFrom
import kotlinx.serialization.json.Json
import kotlinx.serialization.builtins.ListSerializer
import kotlinx.serialization.builtins.MapSerializer
import kotlinx.serialization.builtins.SetSerializer
import kotlinx.serialization.builtins.serializer
import io.ktor.client.call.ReceivePipelineException
import io.ktor.client.request.forms.MultiPartFormDataContent
import io.ktor.client.request.forms.formData
import io.ktor.client.request.forms.submitFormWithBinaryData
import io.ktor.http.ContentDisposition
import io.ktor.http.HttpHeaders
import io.ktor.http.content.TextContent
import io.ktor.http.Headers
import io.ktor.utils.io.core.Input
import io.ktor.http.encodedPath
import io.ktor.http.path

internal interface ArtistsApi {

    /**
    * Get an artist by ID
    * Returns a single artist by it&#39;s ID. You&#39;ll get a 404 if the artist doesn&#39;t exist.
    * @param id  
    * @return ArtistSchema
    */
    suspend fun nekosapiArtistsApiArtist(id: kotlin.Int) : ArtistSchema

    /**
    * Get an artist by ID
    * Returns a single artist by it&#39;s ID. You&#39;ll get a 404 if the artist doesn&#39;t exist.
    * @param id  
    * @return HttpResponse
    */
    suspend fun nekosapiArtistsApiArtistResponse(id: kotlin.Int) : NetworkResponse<ArtistSchema>

    /**
    * Get an artist&#39;s images
    * Returns a paginated list of an artist&#39;s images.
    * @param id  
    * @param limit  (optional, default to 100)
    * @param offset  (optional, default to 0)
    * @return PagedImageSchema
    */
    suspend fun nekosapiArtistsApiArtistImages(id: kotlin.Int, limit: kotlin.Int? = null, offset: kotlin.Int? = null) : PagedImageSchema

    /**
    * Get an artist&#39;s images
    * Returns a paginated list of an artist&#39;s images.
    * @param id  
    * @param limit  (optional, default to 100)
    * @param offset  (optional, default to 0)
    * @return HttpResponse
    */
    suspend fun nekosapiArtistsApiArtistImagesResponse(id: kotlin.Int, limit: kotlin.Int? = null, offset: kotlin.Int? = null) : NetworkResponse<PagedImageSchema>

    /**
    * Get all artists
    * Returns a paginated list of all artists listed in the API.
    * @param search Search term. Will return all tags with this term(s) in their name or description. (optional)
    * @param policyRepost Does this artist allow you to repost their art in other places? (optional)
    * @param policyCredit Are you required to credit the artist when using their art? (optional)
    * @param policyAi Does the artist allow you to use their art for AI projects (AI training)? (optional)
    * @param limit  (optional, default to 100)
    * @param offset  (optional, default to 0)
    * @return PagedArtistSchema
    */
    suspend fun nekosapiArtistsApiArtists(search: kotlin.String? = null, policyRepost: kotlin.Boolean? = null, policyCredit: kotlin.Boolean? = null, policyAi: kotlin.Boolean? = null, limit: kotlin.Int? = null, offset: kotlin.Int? = null) : PagedArtistSchema

    /**
    * Get all artists
    * Returns a paginated list of all artists listed in the API.
    * @param search Search term. Will return all tags with this term(s) in their name or description. (optional)
    * @param policyRepost Does this artist allow you to repost their art in other places? (optional)
    * @param policyCredit Are you required to credit the artist when using their art? (optional)
    * @param policyAi Does the artist allow you to use their art for AI projects (AI training)? (optional)
    * @param limit  (optional, default to 100)
    * @param offset  (optional, default to 0)
    * @return HttpResponse
    */
    suspend fun nekosapiArtistsApiArtistsResponse(search: kotlin.String? = null, policyRepost: kotlin.Boolean? = null, policyCredit: kotlin.Boolean? = null, policyAi: kotlin.Boolean? = null, limit: kotlin.Int? = null, offset: kotlin.Int? = null) : NetworkResponse<PagedArtistSchema>


    companion object {
        operator fun invoke(basePath: String = "https://api.nekosapi.com", httpClient: HttpClient, json: Json): ArtistsApi = ArtistsApiImpl(basePath, httpClient, json)
    }
}

internal class ArtistsApiImpl(basePath: kotlin.String, httpClient: HttpClient, json: Json): ArtistsApi {
    private val _basePath = basePath
    private val _httpClient = httpClient
    private val _json = json

    /**
    * Get an artist by ID
    * Returns a single artist by it&#39;s ID. You&#39;ll get a 404 if the artist doesn&#39;t exist.
    * @param id  
    * @return ArtistSchema
    */
    @Suppress("UNCHECKED_CAST")
    override suspend fun nekosapiArtistsApiArtist(id: kotlin.Int) : ArtistSchema {
        try {
            return nekosapiArtistsApiArtistResponse(id).body()
        } catch (pipeline: ReceivePipelineException) {
            throw pipeline.cause
        }
    }

    /**
    * Get an artist by ID
    * Returns a single artist by it&#39;s ID. You&#39;ll get a 404 if the artist doesn&#39;t exist.
    * @param id  
    * @return HttpResponse
    */
    @Suppress("UNCHECKED_CAST")
    override suspend fun nekosapiArtistsApiArtistResponse(id: kotlin.Int) : NetworkResponse<ArtistSchema> {
        val builder = HttpRequestBuilder()

        builder.method = HttpMethod.Get
        builder.url {
            takeFrom(_basePath)
            encodedPath = encodedPath.let { startingPath ->
                path("v3/artists/$id")
                return@let startingPath + encodedPath
            }
        }

        with(builder.headers) {
            append("Accept", "application/json")
        }

        val response = _httpClient.request(builder)

        val serializer = ArtistSchema.serializer()

        return NetworkResponse(
            httpResponse = response,
            bodyReader = { _json.decodeFromString(serializer, it.body()) }
        )
    }

    /**
    * Get an artist&#39;s images
    * Returns a paginated list of an artist&#39;s images.
    * @param id  
    * @param limit  (optional, default to 100)
    * @param offset  (optional, default to 0)
    * @return PagedImageSchema
    */
    @Suppress("UNCHECKED_CAST")
    override suspend fun nekosapiArtistsApiArtistImages(id: kotlin.Int, limit: kotlin.Int?, offset: kotlin.Int?) : PagedImageSchema {
        try {
            return nekosapiArtistsApiArtistImagesResponse(id, limit, offset).body()
        } catch (pipeline: ReceivePipelineException) {
            throw pipeline.cause
        }
    }

    /**
    * Get an artist&#39;s images
    * Returns a paginated list of an artist&#39;s images.
    * @param id  
    * @param limit  (optional, default to 100)
    * @param offset  (optional, default to 0)
    * @return HttpResponse
    */
    @Suppress("UNCHECKED_CAST")
    override suspend fun nekosapiArtistsApiArtistImagesResponse(id: kotlin.Int, limit: kotlin.Int?, offset: kotlin.Int?) : NetworkResponse<PagedImageSchema> {
        val builder = HttpRequestBuilder()

        builder.method = HttpMethod.Get
        builder.url {
            takeFrom(_basePath)
            encodedPath = encodedPath.let { startingPath ->
                path("v3/artists/$id/images")
                return@let startingPath + encodedPath
            }
            @Suppress("UNNECESSARY_SAFE_CALL")
            with(parameters) {
                limit?.let { append("limit", it.toString()) }
                offset?.let { append("offset", it.toString()) }
            }
        }

        with(builder.headers) {
            append("Accept", "application/json")
        }

        val response = _httpClient.request(builder)

        val serializer = PagedImageSchema.serializer()

        return NetworkResponse(
            httpResponse = response,
            bodyReader = { _json.decodeFromString(serializer, it.body()) }
        )
    }

    /**
    * Get all artists
    * Returns a paginated list of all artists listed in the API.
    * @param search Search term. Will return all tags with this term(s) in their name or description. (optional)
    * @param policyRepost Does this artist allow you to repost their art in other places? (optional)
    * @param policyCredit Are you required to credit the artist when using their art? (optional)
    * @param policyAi Does the artist allow you to use their art for AI projects (AI training)? (optional)
    * @param limit  (optional, default to 100)
    * @param offset  (optional, default to 0)
    * @return PagedArtistSchema
    */
    @Suppress("UNCHECKED_CAST")
    override suspend fun nekosapiArtistsApiArtists(search: kotlin.String?, policyRepost: kotlin.Boolean?, policyCredit: kotlin.Boolean?, policyAi: kotlin.Boolean?, limit: kotlin.Int?, offset: kotlin.Int?) : PagedArtistSchema {
        try {
            return nekosapiArtistsApiArtistsResponse(search, policyRepost, policyCredit, policyAi, limit, offset).body()
        } catch (pipeline: ReceivePipelineException) {
            throw pipeline.cause
        }
    }

    /**
    * Get all artists
    * Returns a paginated list of all artists listed in the API.
    * @param search Search term. Will return all tags with this term(s) in their name or description. (optional)
    * @param policyRepost Does this artist allow you to repost their art in other places? (optional)
    * @param policyCredit Are you required to credit the artist when using their art? (optional)
    * @param policyAi Does the artist allow you to use their art for AI projects (AI training)? (optional)
    * @param limit  (optional, default to 100)
    * @param offset  (optional, default to 0)
    * @return HttpResponse
    */
    @Suppress("UNCHECKED_CAST")
    override suspend fun nekosapiArtistsApiArtistsResponse(search: kotlin.String?, policyRepost: kotlin.Boolean?, policyCredit: kotlin.Boolean?, policyAi: kotlin.Boolean?, limit: kotlin.Int?, offset: kotlin.Int?) : NetworkResponse<PagedArtistSchema> {
        val builder = HttpRequestBuilder()

        builder.method = HttpMethod.Get
        builder.url {
            takeFrom(_basePath)
            encodedPath = encodedPath.let { startingPath ->
                path("v3/artists")
                return@let startingPath + encodedPath
            }
            @Suppress("UNNECESSARY_SAFE_CALL")
            with(parameters) {
                search?.let { append("search", it.toString()) }
                policyRepost?.let { append("policy_repost", it.toString()) }
                policyCredit?.let { append("policy_credit", it.toString()) }
                policyAi?.let { append("policy_ai", it.toString()) }
                limit?.let { append("limit", it.toString()) }
                offset?.let { append("offset", it.toString()) }
            }
        }

        with(builder.headers) {
            append("Accept", "application/json")
        }

        val response = _httpClient.request(builder)

        val serializer = PagedArtistSchema.serializer()

        return NetworkResponse(
            httpResponse = response,
            bodyReader = { _json.decodeFromString(serializer, it.body()) }
        )
    }

}
