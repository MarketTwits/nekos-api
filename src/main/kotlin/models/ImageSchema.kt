/**
* Nekos API
* An open source anime artworks API.
*
* OpenAPI spec version: v3
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package news.models

import news.models.ArtistSchema
import news.models.CharacterSchema
import news.models.TagSchema
import kotlinx.serialization.Serializable






import kotlinx.serialization.SerialName


/**
 * 
 * @param id The image's ID.
 * @param idV2 The image's ID in the v2 API.
 * @param imageUrl The original/full image's URL. The format is always WEBP.
 * @param sampleUrl The sample image's URL. It's a reduced version of the original image that is either 360px tall or 360px wide, whichever is smaller. The format is always WEBP.
 * @param imageSize The file size of the image.
 * @param imageWidth The width of the image.
 * @param imageHeight The height of the image.
 * @param sampleSize The file size of the sample image.
 * @param sampleWidth The width of the sample image.
 * @param sampleHeight The height of the sample image.
 * @param source The source URL of the image (where it was first posted).
 * @param sourceId The source ID of the sauce in [NekoSauce](https://nekosauce.org).
 * @param rating The age rating of the image.
 * @param verification The verification level of the image. Normal users will only see images with this set to `verified`.
 * @param hashMd5 The MD5 hash of the image. This is a(n almost) unique identifier for the image.
 * @param hashPerceptual The perceptual hash of the image. This can be used to compare this image to other images.
 * @param colorDominant The dominant color of the image. [R, G, B]
 * @param colorPalette The color palette of the image. [[R, G, B], [R, G, B], ...]
 * @param duration The amount of frames that make up the image (if it's animated, check `is_animated`).
 * @param isOriginal Whether the image's idea is original or it uses characters/settings/content from another place (not original).
 * @param isScreenshot Whether the image is a screenshot of an anime ep./manga page.
 * @param isFlagged Whether the image is flagged by mods.
 * @param isAnimated Whether the image is animated or not. This'll become useful in the future when we add GIFs.
 * @param artist 
 * @param characters The characters that appear in the image.
 * @param tags The image's tags.
 * @param createdAt The time the image was created. This value is a POSIX timestamp.
 * @param updatedAt The time the image was last updated. This value is a POSIX timestamp.
 */
@Serializable
internal data class ImageSchema (
    /* The image's ID. */
    
    @SerialName("id")
    val id: kotlin.Int,
    /* The image's ID in the v2 API. */
    
    @SerialName("id_v2")
    val idV2: kotlin.String,
    /* The original/full image's URL. The format is always WEBP. */
    
    @SerialName("image_url")
    val imageUrl: kotlin.String,
    /* The sample image's URL. It's a reduced version of the original image that is either 360px tall or 360px wide, whichever is smaller. The format is always WEBP. */
    
    @SerialName("sample_url")
    val sampleUrl: kotlin.String,
    /* The file size of the image. */
    
    @SerialName("image_size")
    val imageSize: kotlin.Int,
    /* The width of the image. */
    
    @SerialName("image_width")
    val imageWidth: kotlin.Int,
    /* The height of the image. */
    
    @SerialName("image_height")
    val imageHeight: kotlin.Int,
    /* The file size of the sample image. */
    
    @SerialName("sample_size")
    val sampleSize: kotlin.Int,
    /* The width of the sample image. */
    
    @SerialName("sample_width")
    val sampleWidth: kotlin.Int,
    /* The height of the sample image. */
    
    @SerialName("sample_height")
    val sampleHeight: kotlin.Int,
    /* The source URL of the image (where it was first posted). */
    
    @SerialName("source")
    val source: kotlin.String?,
    /* The source ID of the sauce in [NekoSauce](https://nekosauce.org). */
    
    @SerialName("source_id")
    val sourceId: kotlin.Int?,
    /* The age rating of the image. */
    
    @SerialName("rating")
    val rating: kotlin.String,
    /* The verification level of the image. Normal users will only see images with this set to `verified`. */
    
    @SerialName("verification")
    val verification: kotlin.String,
    /* The MD5 hash of the image. This is a(n almost) unique identifier for the image. */
    
    @SerialName("hash_md5")
    val hashMd5: kotlin.String,
    /* The perceptual hash of the image. This can be used to compare this image to other images. */
    
    @SerialName("hash_perceptual")
    val hashPerceptual: kotlin.String,
    /* The dominant color of the image. [R, G, B] */
    
    @SerialName("color_dominant")
    val colorDominant: kotlin.collections.List<kotlin.Int>,
    /* The color palette of the image. [[R, G, B], [R, G, B], ...] */
    
    @SerialName("color_palette")
    val colorPalette: kotlin.collections.List<kotlin.collections.List<kotlin.Int>>,
    /* The amount of frames that make up the image (if it's animated, check `is_animated`). */
    
    @SerialName("duration")
    val duration: kotlin.Int?,
    /* Whether the image's idea is original or it uses characters/settings/content from another place (not original). */
    
    @SerialName("is_original")
    val isOriginal: kotlin.Boolean,
    /* Whether the image is a screenshot of an anime ep./manga page. */
    
    @SerialName("is_screenshot")
    val isScreenshot: kotlin.Boolean,
    /* Whether the image is flagged by mods. */
    
    @SerialName("is_flagged")
    val isFlagged: kotlin.Boolean,
    /* Whether the image is animated or not. This'll become useful in the future when we add GIFs. */
    
    @SerialName("is_animated")
    val isAnimated: kotlin.Boolean,
    
    @SerialName("artist")
    val artist: ArtistSchema?,
    /* The characters that appear in the image. */
    
    @SerialName("characters")
    val characters: kotlin.collections.List<CharacterSchema>,
    /* The image's tags. */
    
    @SerialName("tags")
    val tags: kotlin.collections.List<TagSchema>,
    /* The time the image was created. This value is a POSIX timestamp. */
    
    @SerialName("created_at")
    val createdAt: kotlin.Double,
    /* The time the image was last updated. This value is a POSIX timestamp. */
    
    @SerialName("updated_at")
    val updatedAt: kotlin.Double

) {

}

